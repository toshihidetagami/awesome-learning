{"version":3,"sources":["webpack:///./src/components/Quiz/quizUtilities.js","webpack:///./src/components/Quiz/Question/Question.js","webpack:///./src/components/Quiz/Question/questionValidator.js","webpack:///./src/components/Quiz/Quiz.js","webpack:///./src/templates/quiz-template.js","webpack:///./src/components/shared/SectionTitle/SectionTitle.js","webpack:///./src/components/shared/SectionTitle/index.js","webpack:///./src/components/shared/Block/Block.js","webpack:///./src/components/shared/Block/index.js","webpack:///./src/components/shared/ContentSection/ContentSection.js","webpack:///./src/components/shared/ContentSection/index.js"],"names":["getChoiceIndex","element","parseInt","getAttribute","Question","handleInputChange","question","questionId","questionIndex","shouldShowCorrectChoice","title","className","onChange","cx","isCorrect","codeSnippet","explanation","choices","map","choice","choiceIndex","choiceId","formatChoiceId","shouldBoldenLabel","correctChoices","includes","key","data-choice-index","data-question-index","id","name","type","value","htmlFor","questionValidator","selectedChoices","reduce","listOfChoices","isSelected","push","correctChoiceValues","length","every","Quiz","quiz","slug","initialState","questions","useState","updateQuizState","fieldset","currentTarget","target","currentQuestion","selectedIndices","Array","from","querySelectorAll","forEach","index","updatedQuestions","StyledLink","variation","path","ContentSection","subTitle","description","formatQuestionId","questionTitle","onClick","window","scrollTo","validatedQuestions","query","QuizTemplate","data","site","siteMetadata","siteTitle","siteSubtitle","subtitle","markdownRemark","frontmatter","quizTitle","courseDescription","fields","metaDescription","preReadQuiz","Layout","Page","SectionTitle","props","sectionTitleClasses","fontSize","textTransform","Heading","headingLevel","Block","mb","children","defaultProps","is","mt","ml","mr","RenderedElement","style","marginTop","marginRight","marginBottom","marginLeft","isLight","contentAlignment","titleAlignment","headerClasses","contentClasses"],"mappings":"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","file":"component---src-templates-quiz-template-js-b8d190fb39163d5690bb.js","sourcesContent":["// Formats the input ID for one question choice\nexport const formatChoiceId = (questionId, choiceIndex) => `${questionId}_choice${choiceIndex}`;\n\n// Formats the question ID for one question\nexport const formatQuestionId = questionIndex => `question${questionIndex}`;\n\n// Gets the numeric index of this choice\nexport const getChoiceIndex = element => parseInt(element.getAttribute('data-choice-index'), 10);\n\n// Gets the numeric index of this choice\nexport const getQuestionIndex = element => parseInt(element.getAttribute('data-question-index'), 10);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from 'classnames';\nimport { formatChoiceId } from \"../quizUtilities\";\nimport \"./question.scss\";\n\nconst Question = ({\n  handleInputChange,\n  question,\n  questionId,\n  questionIndex,\n  shouldShowCorrectChoice,\n  title\n}) => (\n  <fieldset className=\"Question\" onChange={handleInputChange}>\n    <legend className={cx(\"Question-legend\", {\n      \"Question-legend--isCorrect\": question.isCorrect === true,\n      \"Question-legend--isIncorrect\": question.isCorrect === false,\n    })}>\n      {title}\n    </legend>\n    {question.codeSnippet && (\n      <pre className=\"Question-codeSnippet\">\n        {question.codeSnippet}\n      </pre>\n    )}\n    {/* If instructed, show the explanation to this question */}\n    {shouldShowCorrectChoice && question.explanation && (\n      <div className=\"Question-explanation\">\n        <b>Explanation: </b>{question.explanation}\n      </div>\n    )}\n    {/* Iterate over all choices this question has, and display them */}\n    {\n      question.choices.map((choice, choiceIndex) => {\n        const choiceId = formatChoiceId(questionId, choiceIndex);\n        // Bolden the label to this question to highlight it as the right answer\n        const shouldBoldenLabel = (\n          shouldShowCorrectChoice\n          && question.correctChoices.includes(choiceIndex)\n        );\n        return (\n          <div className=\"Question-choice\" key={choiceId}>\n            <input\n              className=\"Question-choiceInput\"\n              data-choice-index={choiceIndex}\n              data-question-index={questionIndex}\n              id={choiceId}\n              key={choiceIndex}\n              name={questionId}\n              type={question.type}\n              value={choice.value}\n            />\n            <label\n              className={cx('Question-choiceLabel', {\n                'Question-choiceLabel--isBold': shouldBoldenLabel\n              })}\n              htmlFor={choiceId}\n            >\n              {choice.value}\n            </label>\n          </div>\n        );\n      })\n    }\n  </fieldset>\n);\n\nQuestion.propTypes = {\n  handleInputChange: PropTypes.func,\n  question: PropTypes.object.isRequired,\n  questionId: PropTypes.string.isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  shouldShowCorrectChoice: PropTypes.bool,\n  title: PropTypes.string\n};\n\nexport default Question;\n","export default function questionValidator(question) {\n  const { choices, correctChoices } = question;\n  // Get the user-selected choice values\n  const selectedChoices = choices.reduce((listOfChoices, choice) => {\n    if (choice.isSelected) {\n      listOfChoices.push(choice.value);\n    }\n    return listOfChoices;\n  }, []);\n\n  // Get the values of the correct choices\n  const correctChoiceValues = choices.reduce((listOfChoices, choice, choiceIndex) => {\n    if (correctChoices.includes(choiceIndex)) {\n      listOfChoices.push(choice.value);\n    }\n    return listOfChoices;\n  }, []);\n\n  // If there is a discrepancy in the number of choices, versus the number of correct choices,\n  // mark the question as incorrect and return early\n  if (selectedChoices.length !== correctChoices.length) {\n    question.isCorrect = false;\n    return question;\n  }\n\n  // If the length is the same, compare each value to verify that every correct choice\n  // is in the list of user-selected choices\n  question.isCorrect = correctChoiceValues.every(choice => selectedChoices.includes(choice));\n  return question;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatQuestionId, getChoiceIndex, getQuestionIndex } from './quizUtilities';\nimport ContentSection from '../shared/ContentSection';\nimport Question from './Question';\nimport questionValidator from './Question/questionValidator';\nimport StyledLink from '../shared/StyledLink';\nimport './quiz.scss';\n\nconst Quiz = ({ quiz, slug, title }) => {\n  const initialState = {\n    shouldShowCorrectChoice: false,\n    questions: quiz.questions\n  };\n  // Hooks to maintain state within this Quiz\n  const [\n    { shouldShowCorrectChoice, questions },\n    updateQuizState\n  ] = useState(initialState);\n\n  // Handles changing of a question; update state based on which choice(s) the user has selected\n  const handleInputChange = ({ currentTarget: fieldset, target }) => {\n    // Get the current question and mark the appropriate choices as being selected by the user\n    const questionIndex = getQuestionIndex(target);\n    const currentQuestion = questions[questionIndex];\n    switch (currentQuestion.type) {\n      case 'checkbox': {\n        // Gets the indices of selected checkboxes\n        const selectedIndices = Array.from(\n          fieldset.querySelectorAll('input:checked')\n        ).map(getChoiceIndex);\n\n        // Updates every choice based on whether or not it is in the list of user-selected choices\n        currentQuestion.choices.forEach((choice, index) => {\n          choice.isSelected = selectedIndices.includes(index);\n        });\n        break;\n      }\n      case 'radio': {\n        // Set the selection status of all question choices based on\n        // whether or not the user has selected them\n        const choiceIndex = getChoiceIndex(target);\n        currentQuestion.choices.forEach((choice, index) => {\n          choice.isSelected = choiceIndex === index;\n        });\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n    // Clone the questions array to force a state change\n    const updatedQuestions = Array.from(questions);\n    // Update the state of the quiz\n    updateQuizState({\n      shouldShowCorrectChoice: false,\n      questions: updatedQuestions\n    });\n  };\n\n  // Handles the submission of the quiz\n  const handleQuizSubmit = () => {\n    // Scroll to the top of the page\n    window.scrollTo(0, 0);\n    // Validate every question and update the state of the quiz\n    const validatedQuestions = questions.map(questionValidator);\n    updateQuizState({\n      shouldShowCorrectChoice: true,\n      questions: validatedQuestions\n    });\n  };\n\n  return (\n    <div className=\"Quiz\">\n      <div className=\"Quiz-homeButton\">\n        <StyledLink variation=\"tertiary\" path={slug}>\n          Back to lesson\n        </StyledLink>\n      </div>\n      <ContentSection subTitle=\"Pre-Read Quiz\" title={title}>\n        {quiz.description && <p>{quiz.description}</p>}\n        {/* Iterate over all questions in this Quiz */}\n        {\n          questions.map((question, questionIndex) => {\n            const questionId = formatQuestionId(questionIndex);\n            const questionTitle = `Q${questionIndex + 1}: ${question.description}`;\n            return (\n              <Question\n                handleInputChange={handleInputChange}\n                key={questionId}\n                question={question}\n                questionId={questionId}\n                questionIndex={questionIndex}\n                shouldShowCorrectChoice={shouldShowCorrectChoice}\n                title={questionTitle}\n              />\n            );\n          })\n        }\n        <button\n          className=\"Quiz-submitButton\"\n          onClick={handleQuizSubmit}\n        >\n          Submit Quiz\n        </button>\n      </ContentSection>\n    </div>\n  );\n};\n\nQuiz.propTypes = {\n  quiz: PropTypes.shape({\n    questions: PropTypes.array,\n    description: PropTypes.node\n  }).isRequired,\n  slug: PropTypes.string, \n  title: PropTypes.string\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/shared/Layout';\nimport Page from '../components/shared/Page';\nimport Quiz from '../components/Quiz';\nimport { SITE_METADATA_PROP_TYPE } from '../constants/propTypes';\n\nconst QuizTemplate = ({ data }) => {\n  const { title: siteTitle, subtitle: siteSubtitle } = data.site.siteMetadata;\n\n  const {\n    title: quizTitle,\n    description: courseDescription\n  } = data.markdownRemark.frontmatter;\n\n  const { slug } = data.markdownRemark.fields;\n  const { title } = data.markdownRemark.frontmatter;\n\n  const metaDescription = courseDescription !== null ? courseDescription : siteSubtitle;\n\n  const { markdownRemark: { frontmatter: { preReadQuiz } } } = data;\n\n  return (\n    <Layout\n      title={`${quizTitle} - ${siteTitle}`}\n      description={metaDescription}\n    >\n      <Page>\n        {\n          preReadQuiz === null ? (\n            <h1>A quiz for this lesson is not ready yet!</h1>\n          ) : (\n            <Quiz quiz={preReadQuiz} slug={slug} title={title} />\n          )\n        }\n      </Page>\n    </Layout>\n  );\n};\n\nQuizTemplate.propTypes = {\n  data: PropTypes.shape({\n    site: SITE_METADATA_PROP_TYPE.isRequired,\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        description: PropTypes.string,\n        preReadQuiz: PropTypes.string\n      }),\n      fields: PropTypes.shape({\n        slug: PropTypes.string\n      })\n    })\n  }).isRequired\n};\n\nexport const query = graphql`\n  query QuizBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        subtitle\n        title\n        url\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      fields {\n        slug\n        tagSlugs\n      }\n      frontmatter {\n        title\n        preReadQuiz {\n          description\n          questions {\n            codeSnippet\n            correctChoices\n            description\n            explanation\n            type\n            choices {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default QuizTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Block from '../Block';\nimport './SectionTitle.scss';\n\nconst SectionTitle = (props) => {\n  const sectionTitleClasses = cx('SectionTitle', {\n    'SectionTitle--body': props.fontSize === 'xl',\n    'SectionTitle--uppercase': props.textTransform === true\n  });\n  const Heading = `${props.headingLevel}`;\n  return (\n    <Block mb={props.mb}>\n      <Heading className={sectionTitleClasses}> {props.children} </Heading>\n    </Block>\n  );\n};\n\nSectionTitle.propTypes = {\n  children: PropTypes.string.isRequired,\n  headingLevel: PropTypes.oneOf(['h2', 'h3', 'h4']),\n  fontSize: PropTypes.oneOf(['body', 'large', 'xl']),\n  textTransform: PropTypes.bool,\n  mb: PropTypes.string\n};\n\nSectionTitle.defaultProps = {\n  headingLevel: 'h2',\n  fontSize: 'large',\n  textTransform: false,\n  mb: '0px'\n};\n\nexport default SectionTitle;\n","export { default } from './SectionTitle';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Block = ({\n  is,\n  children,\n  mt,\n  mb,\n  ml,\n  mr\n}) => {\n  const RenderedElement = is;\n  return (\n    <RenderedElement\n      style={{\n        marginTop: `${mt}`,\n        marginRight: `${mr}`,\n        marginBottom: `${mb}`,\n        marginLeft: `${ml}`\n      }}\n    >\n      {children}\n    </RenderedElement>\n  );\n};\n\nBlock.propTypes = {\n  is: PropTypes.string.isRequired,\n  mt: PropTypes.string,\n  mb: PropTypes.string,\n  ml: PropTypes.string,\n  mr: PropTypes.string,\n  children: PropTypes.node.isRequired\n};\n\nBlock.defaultProps = {\n  is: 'div',\n  mb: '0px',\n  mr: '0px',\n  mt: '0px',\n  ml: '0px'\n};\n\nexport default Block;\n","export { default } from './Block';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport SectionTitle from \"../SectionTitle\";\nimport './ContentSection.scss';\n\nconst ContentSection = ({\n  className,\n  children,\n  title,\n  subTitle,\n  isLight,\n  contentAlignment,\n  titleAlignment\n}) => {\n  const headerClasses = cx('ContentSection-title', {\n    'ContentSection-title--alignCenter': titleAlignment === 'center',\n    'ContentSection-title--alignLeft': titleAlignment === 'left',\n    'ContentSection-title--textLight': isLight\n  });\n  const contentClasses = cx(`ContentSection-content ${className}`, {\n    'ContentSection-content--alignCenter': contentAlignment === 'center',\n    'ContentSection-content--alignLeft': contentAlignment === 'left'\n  });\n\n  return (\n    <div className=\"ContentSection\">\n      {title && (\n        <header className={headerClasses}>\n          <SectionTitle>{title}</SectionTitle>\n          {subTitle && <SectionTitle>{subTitle}</SectionTitle>}\n        </header>\n      )}\n      <div className={contentClasses}>{children}</div>\n    </div>\n  );\n};\n\nContentSection.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n  subTitle: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  isLight: PropTypes.bool,\n  contentAlignment: PropTypes.oneOf(['left', 'center']),\n  titleAlignment: PropTypes.oneOf(['left', 'center'])\n};\n\nContentSection.defaultProps = {\n  className: '',\n  title: null,\n  subTitle: null,\n  contentAlignment: 'left',\n  titleAlignment: 'left',\n  isLight: false\n};\n\nexport default ContentSection;\n","export { default } from './ContentSection';"],"sourceRoot":""}